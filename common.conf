// Note: the Typesafe Config library is a bit picky with suffixes;
// the common files included via the "include" directive should
// have a ".conf" suffix.

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
//
// Note however that += won't work inside vars.base.
// It's https://github.com/typesafehub/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

///////////////////////////////////////////////////////////////////////

//
// This configuration file lists contain a set of projects
// and repositories, tracking the development of various community
// projects on top of a given (stable or release) Scala version.
//
// Its purpose is to allow developers to be informed whenever a change
// in one of the project breaks one or more other projects.
//
//
// This is the Typesafe development build file for the Scala 2.12.x branch.
// ------------------------------------------------------------------------
//
// This build file tracks the Scala 2.12.x branch, and is used
// to track the current development of Typesafe projects against
// (mostly) stable versions of their other required projects.
//
// Therefore:
// - Typesafe projects are either master or a development/unstable branch
// - the other projects are either from a stable release, a pre-release,
//   or a branch from a fork that is intended to stabilize the project.
//

// TODO: submit PRs to upstream where possible to avoid forks (grep for adriaanm/)
// TODO: update to latest where possible
vars: {
  scala-ref                    : "scala/scala.git#2.12.x"
  scala-ref                    : ${?scala_ref}   // allow overriding scala-ref using the scala_ref environment variable

  // TODO: merge required changes upstream to get rid of our forks, maintaining our one won't scale
  browse-ref                   : "SethTisue/browse.git#topic/2.11-compat"
  lift-framework-ref           : "lift/framework.git#3.0-M2-release"
  spray-ref                    : "spray/spray.git#v1.3.3"
  // only building project twirl-api, fixed sha from master branch that has Scala 2.11 compatibility patches merged
  spray-twirl-ref              : "spray/twirl.git#102978cb508684aee0cfa09d71027965cdcd77b4"
  play-twirl-ref               : "SethTisue/twirl.git#community-build"  // TODO unfork once https://github.com/playframework/twirl/pull/118 is merged
  spray-json-ref               : "spray/spray-json.git"
  // fixed sha from 2.10.x branch that has Scala 2.11 compatibility patches merged
  scala-io-ref                 : "adriaanm/scala-io.git#community-build"
  json4s-ref                   : "json4s/json4s.git#v3.2.10_2.11"
  playframework-ref            : "SethTisue/playframework.git#2.5.x-community-build"
  // fixed sha from master that has Scala 2.11 patches merged
  parboiled-ref                : "sirthias/parboiled.git#c53e650212f222c9b1f75fa1ab13d7cab9db164e"
  // This pull request supports the fully-cross-versioned continuations plugin, shipped with 2.11+
  scala-arm-ref                : "jsuereth/scala-arm.git#pull/31/head"
  genjavadoc-ref               : "typesafehub/genjavadoc.git#v0.5_2.11.0-M8"
  // There's no suitable release yet, so we depend on this commit. Upgrade to the next tagged version once released
  scala-refactoring-ref        : "scala-ide/scala-refactoring.git#44dca8b74808528693f884cfd3c5c9d3ed13e519"
  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  scala-stm-ref                : "nbronson/scala-stm.git#release-0.7"
  scalacheck-ref               : "rickynils/scalacheck.git#1.11.6"
  scalatest-ref                : "SethTisue/scalatest.git#3.0.x-community-build"
  // fixed sha/tag (a compromise), the sha points at master that supports Scala 2.11
  spire-ref                    : "non/spire.git#3d2a41e91a1f6946fac63660f6157d4a6e4a281d"
  # before adding the scoverage 1.3.5 dependency
  shapeless-ref                : "milessabin/shapeless.git#a719bba5bf74f5e4225d51a66b3b5f468ba49f02"
  scoverage-ref                : "scoverage/scalac-scoverage-plugin.git#1.0.2"
  kind-projector-ref           : "non/kind-projector.git#v0.7.1"
  sbt-ref                      : "adriaanm/sbt.git#community-build" // 0.13.7-M2 + drop ListBuffer.readOnly (after 0.13.7-M2, new dependencies were added --> TODO: add them here as well)

  // this is commit corresponding to 1.3.0 release, unfortunely pimpathon doesn't tag its releases
  pimpathon-ref                : "stacycurl/pimpathon.git#d2354dd92f5481610f4610edba3574880b07263e"
  sbt-testng-interface-ref     : "SethTisue/sbt-testng-interface.git#no-bintray"

  // tracking upstream (the ideal)
  akka-ref                     : "akka/akka.git#master"
  async-ref                    : "scala/async.git"
  scala-continuations-ref      : "scala/scala-continuations.git"
  scala-parser-combinators-ref : "scala/scala-parser-combinators.git"
  scala-partest-ref            : "scala/scala-partest.git"
  scala-partest-interface-ref  : "scala/scala-partest-interface.git"
  scala-java8-compat-ref       : "szeiger/scala-java8-compat.git#wip/scala-2.12.0-rc1-compat"
  scala-xml-ref                : "scala/scala-xml.git"
  scala-swing-ref              : "scala/scala-swing.git#2.0.x"
  scala-records-ref            : "scala-records/scala-records.git"
  slick-ref                    : "slick/slick.git"
  twitter-util-ref             : "adriaanm/util.git#develop"
  jawn-ref                     : "non/jawn.git"
  mima-ref                     : "SethTisue/migration-manager.git#2.12-compat"
  utest-ref                    : "lihaoyi/utest.git#0.4.3"
  acyclic-ref                  : "lihaoyi/acyclic.git"
  sourcecode-ref               : "lihaoyi/sourcecode.git"
  fastparse-ref                : "lihaoyi/fastparse.git"
  macro-paradise-ref           : "adriaanm/paradise.git#2.12.x-cobu"
  macro-compat-ref             : "milessabin/macro-compat.git"

  specs2-3-ref                 : "adriaanm/specs2.git#community-build-3.6" // "etorreborre/specs2.git#SPECS2-3.6.2"
  specs2-2-ref                 : "adriaanm/specs2.git#community-build-2.4" // "etorreborre/specs2.git#SPECS2-2.4.17"

  zinc-ref                     : "typesafehub/zinc.git"
  sbinary-ref                  : "adriaanm/sbinary.git#community-build"

  // TODO move back to master; see https://github.com/scala/community-builds/issues/234
  // for details
  sbt-republish-ref            : "typesafehub/sbt-republish.git#9f7109c705175c6d8e7e99c60e53959f9e4c5df0"

  scalaz-ref                   : "SethTisue/scalaz.git#community-build-2.12"  // TODO SI-8079 fix + variance of Id
  scodec-bits-ref              : "adriaanm/scodec-bits.git#dbuild-sam"
  discipline-ref               : "typelevel/discipline.git#v0.2"
  scala-2-12-junit-mixin-plugin-ref : "scala-js/scala-2.12-junit-mixin-plugin.git"
  scala-js-ref                 : "scala-js/scala-js.git"
  scalamock-ref                : "dvic/scalamock.git"  // TODO use paulbutcher/ again once https://github.com/paulbutcher/ScalaMock/pull/149 gets merged
  scalariform-ref              : "daniel-trinh/scalariform.git"

  // master has a "snapshot-0.7a" version setting which makes a picky regex
  // in dbuild 0.9.4 choke; it's https://github.com/typesafehub/dbuild/issues/182.
  // but the problem no longer exists on the 0.8 and 0.9 branches, so
  // once we move to one of those, we won't need the fork anymore.
  scalaz-stream-ref            : "lrytz/scalaz-stream.git#fix-2.12-infer"

  // master depends on Akka HTTP and Akka Stream, which are tricky to depend on
  // (they are built only a special branch). so freeze right before the dependency was added.
  ensime-ref                   : "ensime/ensime-server.git#f4de40f6ce93afa75fd5bbe153c5f1df73035b1a"

  // master uses Shapeless 2.3 only features, so at this time it doesn't make sense to
  // track. there is no other branch we can track, so we use a version tag.  at time of
  // writing (Oct 2015) 1.1.0 is both the latest released version and the version that
  // Ensime depends on.  and Ensime is the main reason we're adding this at all
  spray-json-shapeless-ref     : "fommil/spray-json-shapeless.git#v1.1.0"

  // version settings
  sbt-version                  : "0.13.12"
}

vars {
  // Compiler options from `scalac_opts` env, passed to project builds (not when building scala/scala)
  scalac-opts                  : ""
  scalac-opts                  : ${?scalac_opts}

  // Setting from `scala_build_bootstrap_opt` env, passed to ant when building scala/scala, e.g., "-Dlocker.skip=1" to skip the bootstrap
  scala-build-bootstrap-opt    : ""
  scala-build-bootstrap-opt    : ${?scala_build_bootstrap_opt}

  // Setting from `scala_build_extra_opt` env, passed to ant when building scala/scala, e.g., "-opt:l:classpath"
  scala-build-extra-opt        : ""
  scala-build-extra-opt        : ${?scala_build_extra_opt}

  default-commands             : []
}

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val projectScope = Load.projectScope(currentRef)
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(fn))
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

vars.ivyPat: ", [organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  01: "local"

  02: "dbuild: https://scala-ci.typesafe.com/artifactory/dbuild/"
  03: "dbuild-ivy: https://scala-ci.typesafe.com/artifactory/dbuild-ivy/"${vars.ivyPat}
  04: "dbuild-unchecked: https://scala-ci.typesafe.com/artifactory/dbuild-unchecked/" // for sbt plugins not available on ivy (they'll fail the pom check on the `dbuild` cache repo above)

  // for scala/scala#5003
  20: "private-repo: https://scala-ci.typesafe.com/artifactory/scala-release-temp/"
}

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

// Topological sort of projects:
// No deps: browse, slick, genjavadoc-plugin, scala-js, scala-swing, scala-partest-interface, async, scalacheck, shapeless, scala-java8-compat
//
// *depends* on scalacheck: scalaz, sbinary, scala-partest, scalatest
// *depends* on scalatest: scodec-bits, scala-records, genjavadoc, scala-stm
//
// scalaz-stream depends on: scalacheck, scalatest, scalaz, scodec-bits

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: default
  space.to: [ default, specs2_36, specs2_24 ]
  extraction-version: "2.12.0-M5"
  sbt-version: ${vars.sbt-version}

  projects: [

  //
  // Community projects (not from Typesafe), and other support libraries:
  // these should be stable releases, pre-releases, or branches aimed
  // at stabilizing those projects when used in conjunction with this Scala version.
  //
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/"${vars.scala-stm-ref}
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/"${vars.shapeless-ref}
    extra.projects: ["coreJVM"]
    // optimizer related. Lukas may want to revisit before 2.12 final
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: "scala-java8-compat",
    uri: "https://github.com/"${vars.scala-java8-compat-ref}
    // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
    // we use "assert" as an identifier there. We disable doc building to avoid that.
    extra.commands: ${vars.default-commands} [ "set publishArtifact in packageDoc := false" ]
  }

  ${vars.base} {
    name: scalaz
    uri: "https://github.com/"${vars.scalaz-ref}
    // [scalaz] [error] Could not run test scalaz.NeedTest: java.lang.AssertionError: false !== true
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: scalaz-stream
    uri: "https://github.com/"${vars.scalaz-stream-ref}
    extra.run-tests: false // TODO enable tests
    // seems to get stuck after [info] + toInputStream.after close read should return -1: OK, proved property.
    // The stack dump looks like this for minutes on end:
    // ```
    // at scalaz.stream.AsyncTopicSpec$$$Lambda$370/1411106347.apply(Unknown Source)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$8(Process.scala:61)
    // at scalaz.stream.Process$class$$Lambda$205/214494001.apply(Unknown Source)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$13(Process.scala:115)
    // at scalaz.stream.Process$class$$Lambda$240/283752252.apply(Unknown Source)
    // at scalaz.stream.Util$.Try(Util.scala:38)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$12(Process.scala:115)
    // at scalaz.stream.Process$class$$Lambda$239/1861849028.apply(Unknown Source)
    // at scalaz.Trampoline$.scalaz$Trampoline$$$anonfun$28(Free.scala:234)
    // at scalaz.Trampoline$$$Lambda$230/516810462.apply(Unknown Source)
    // at scalaz.Free.scalaz$Free$$$anonfun$15(Free.scala:172)
    // at scalaz.Free$$Lambda$221/2004765452.apply(Unknown Source)
    // at scalaz.Free.go2$1(Free.scala:119)
    // at scalaz.Free.go(Free.scala:122)
    // at scalaz.Free.run(Free.scala:172)
    // at scalaz.stream.Process$class.scalaz$stream$Process$class$$$anonfun$9(Process.scala:84)
    // at scalaz.stream.Process$class$$Lambda$237/879163424.apply(Unknown Source)
    // at scalaz.stream.Util$.Try(Util.scala:38)
    // ```
  }

  ${vars.base} {
    name: scodec-bits
    uri: "https://github.com/"${vars.scodec-bits-ref}
    extra: ${vars.base.extra} {
      projects: ["coreJVM"] // TODO: preemptive
      commands: ${vars.default-commands} [
        "set scalacOptions in coreJVM := Seq(\"-opt:l:classpath\", \"-deprecation\", \"-encoding\", \"UTF-8\", \"-feature\", \"-unchecked\", \"-Xlint\", \"-Yno-adapted-args\", \"-Ywarn-dead-code\", \"-Ywarn-numeric-widen\", \"-Ywarn-value-discard\", \"-Xfuture\", \"-Ywarn-unused-import\")"
      ]
      run-tests: false   // TODO: preemptive
    }
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/"${vars.scalatest-ref}
    extra: ${vars.base.extra} {
      projects: ["scalatest", "scalactic"]
      run-tests: false // TODO enable tests
    }
  }

  ${vars.base} {
    name:   "genjavadoc-plugin",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra.projects: genjavadoc-plugin
  }

  ${vars.base} {
    name:   "genjavadoc",
    uri:    "https://github.com/"${vars.genjavadoc-ref}
    extra: ${vars.base.extra} {
      projects: ["tests","javaOut"]
      run-tests: false // TODO enable tests
    }
  }

  ${vars.base} {
   name: "akka"
   uri:  "https://github.com/"${vars.akka-ref}
   extra: ${vars.base.extra} {
     options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
     // Akka provides a "akka-scala-nightly" which it would be nice if
     // we could just use, but it present we can't, and afaict there
     // is no way to tell dbuild to use it *except* omit X.  but we
     // must omit akka-persistence-query-experimental" since it
     // depends on akka-stream-experimental which does not exist on
     // this branch, it comes from another branch. sigh. so the
     // following is what akka-scala-nightly expands to, minus
     // akka-scala-nightly itself, and minus
     // akka-persistence-query-experimental. also omit akka-bench-jmh
     // since it's just benchmarks and we'd have to add another resolver
     // to get the JMH dependency. - ST 8/17/15
     projects: ["akka-actor", "akka-testkit", "akka-slf4j", "akka-kernel", "akka-actor-tests", "akka-typed-experimental", "akka-remote", "akka-multi-node-testkit", "akka-remote-tests", "akka-cluster", "akka-distributed-data-experimental", "akka-cluster-metrics", "akka-cluster-tools", "akka-camel", "akka-persistence", "akka-cluster-sharding", "akka-persistence-tck", "akka-contrib", "akka-osgi", "akka-stream", "akka-stream-tests"]
     run-tests: false // TODO re-enable tests (they've long been disabled in 2.11 as well) - ST 8/27/15
     commands: ${vars.default-commands} [
       // Don't build akka-remote-tests/test scope because it requires ScalaTest 3.0
       "set sources in (LocalProject(\"akka-remote-tests\"), Test) := Nil"
       // Don't build multi-jvm tests because they require akka-remote-tests and ScalaTest 3.0
       "set sources in (LocalProject(\"akka-remote-tests\"), config(\"multi-jvm\")) := Nil"
       "set sources in (LocalProject(\"akka-cluster\"), config(\"multi-jvm\")) := Nil"
     ]
   }
  }

  // TODO
  // broken -- does not compile due to source incompat lang change??
  // ${vars.base} {
  //   name:   "scalariform",
  //   uri:    "https://github.com/"${vars.scalariform-ref}
  //   // avoid building misc subproject that depends on Swing (and is not needed by any other project)
  //   extra.projects: ["scalariform"]
  //   extra.run-tests: false
  // }

  ${vars.base} {
    name: "sbt-testng-interface",
    uri: "https://github.com/"${vars.sbt-testng-interface-ref}
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
  }

//  ${vars.base} {
//    name:   "browse",
//    uri:    "https://github.com/"${vars.browse-ref}
//    extra.commands: ${vars.default-commands} [
//      "set libraryDependencies += \"org.scala-lang.modules\" %% \"scala-xml\" % \"1.0.0-RC6\""
//    ]
//    extra.exclude: ["test", "testLink"]
//  }

  ${vars.base} {
    name: sbinary
    uri:    "https://github.com/"${vars.sbinary-ref}
    extra: ${vars.base.extra} {
      commands: ${vars.default-commands} [
        "removeScalacOptions -Yinline-warnings"
      ]
    }
  }

  ${vars.base} {
    name:   "macro-paradise",
    uri:    "http://github.com/"${vars.macro-paradise-ref}
    extra.run-tests: false // see https://github.com/scala/scala-dev/issues/203
  }

  ${vars.base} {
    name:   "macro-compat",
    uri:    "http://github.com/"${vars.macro-compat-ref}
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

]
}

// no deps: scala-logging-api
// scala-logging-slf4j depends on: scala-logging-api
// scoverage depends on: scala-logging-slf4j, scalacheck, scalatest
// specs2 depends on: scalacheck, scalatest, scalaz, scalaz-stream, scodec-bits, shapeless, scoverage
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_24
  space.to: [ specs2_24 ]
  extraction-version: "2.12.0-M5"
  sbt-version: ${vars.sbt-version}
  projects: [

  ${vars.base} {
    name: specs2_24
    uri: "https://github.com/"${vars.specs2-2-ref}
    extra.projects: ["specs2"] // so that it actually publishes org.specs2 % specs2? -- needed to put some random artifacts in the jar: https://github.com/typesafehub/dbuild/issues/173
    extra.run-tests: false // TODO: at least SnippetsTest is failing.
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/"${vars.discipline-ref}
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/"${vars.scoverage-ref}
    extra: ${vars.base.extra} {
      run-tests: false // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }


// scala-logging-slf4j is used by scoverage, but:
// - scala-logging-slf4j v2.1.2 won't compile (not found: value LoggerMacro)
// - and v3.0.0 changed the artifacts, so we grab v2.1.2 via Ivy instead.
//  ${vars.base} {
//    name: "scala-logging"
//    uri:  "https://github.com/typesafehub/scala-logging.git#v2.1.2"
//  }

  {
    name:   "scala-logging-slf4j"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2"
  }

  {
    name:   "scala-logging-api"
    system: "ivy"
    uri:    "ivy:com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2"
  }

]}


build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_36
  space.to: [ specs2_36 ]
  extraction-version: "2.12.0-M5"
  sbt-version: ${vars.sbt-version}
  projects: [
    ${vars.base} {
      name: kind_projector
      uri:  "https://github.com/"${vars.kind-projector-ref}
      extra: ${vars.base.extra} {
        run-tests: false // TODO: not needed?
      }
    }

    ${vars.base} {
      name: specs2_36
      uri: "https://github.com/"${vars.specs2-3-ref}
      extra.projects: ["specs2"] // so that it actually publishes org.specs2 % specs2? -- needed to put some random artifacts in the jar: https://github.com/typesafehub/dbuild/issues/173
      extra.run-tests: false // TODO: at least SnippetsTest is failing.
    }
  ]
}


//
// sbt depends on: browse, sbinary, specs2
// sbt-republish depends on: sbt
//
// play-twirl depends on: sbt
// Play2-core depends on: akka, play-twirl, scala-stm, specs2 (3.6)
build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  space.from: specs2_36
  space.to: [ play, specs2_36 ]
  extraction-version: "2.12.0-M5"
  sbt-version: ${vars.sbt-version}
  projects: [

  ${vars.base} {
    name: "play-twirl",
    extra.exclude: [ "plugin", "apiJS" ]
    uri: "https://github.com/"${vars.play-twirl-ref}
  }

  ${vars.base} {
    name: "Play2-core",
    uri: "https://github.com/"${vars.playframework-ref},
    check-missing: false
    extra: ${vars.base.extra} {
      projects: ["Play"]
      directory: "framework"
      run-tests: false // TODO enable tests
      exclude: ["Play-Streams"]
      // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
      // and we get double definition error
      commands: ${vars.default-commands} [
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
      ]
    }
  }

]}
