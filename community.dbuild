//// from environment

vars: {
  scala-version: ""
  scala-version: ${?scala_ref}
  scalac-opts: ""
  scalac-opts: ${?scalac_opts}
  node: "node"
  node: ${?NODE}
}

//// vars.base

// Each project is prefixed by ${vars.base} { ...
// so that common options or settings can be set by the
// configuration that includes this common file.
// Note however that += won't work inside vars.base.
// It's https://github.com/typesafehub/config/issues/160.
// That's why if you override extra.commands you must
// explicitly include default-commands.

vars: {
  base: {}
}

//// shared settings

vars {
  default-commands: []
  sbt-version: "0.13.12"
}

//// compiler options manipulation

// appendScalacOptions and removeScalacOptions
// let us work around https://github.com/typesafehub/dbuild/issues/144
vars.default-commands += """
set commands ++= {
  def alterScalacOptions(s: State, fn: Seq[String] => Seq[String]): State = {
    val extracted = Project extract s
    import extracted._
    val r = Project.relation(extracted.structure, true)
    val allDefs = r._1s.toSeq
    val projectScope = Load.projectScope(currentRef)
    val scopes = allDefs.filter(_.key == scalacOptions.key).map(_.scope).distinct
    val redefined = scopes.map(scope => scalacOptions in scope <<= (scalacOptions in scope).map(fn))
    val session = extracted.session.appendRaw(redefined)
    BuiltinCommands.reapply(session, structure, s)
  }
  def appendScalacOptions(s: State, args: Seq[String]) = {
    def appendDistinct[A](x: Seq[A], y: Seq[A]) =
      x.filterNot(y.contains) ++ y
    alterScalacOptions(s, appendDistinct(_, args))
  }
  def removeScalacOptions(s: State, args: Seq[String]) =
    alterScalacOptions(s, _.filterNot(args.contains))
  Seq(
    Command.args("appendScalacOptions", "<option>")(appendScalacOptions),
    Command.args("removeScalacOptions", "<option>")(removeScalacOptions))
}
"""
vars.default-commands += "appendScalacOptions "${vars.scalac-opts}
vars.base.extra.commands = ${vars.default-commands}

//// resolvers

vars.ivyPat: ", [organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]"
options.resolvers: {
  01: "local"

  02: "dbuild: https://scala-ci.typesafe.com/artifactory/dbuild/"
  03: "dbuild-ivy: https://scala-ci.typesafe.com/artifactory/dbuild-ivy/"${vars.ivyPat}
  04: "dbuild-unchecked: https://scala-ci.typesafe.com/artifactory/dbuild-unchecked/" // for sbt plugins not available on ivy (they'll fail the pom check on the `dbuild` cache repo above)

  05: "scala-pr-validation-snapshots: https://scala-ci.typesafe.com/artifactory/scala-pr-validation-snapshots"

  // without this Scala.js can't find the Scala library sources. TODO: why? Artifactory config issue?
  20: "private-repo: https://scala-ci.typesafe.com/artifactory/scala-release-temp/"
}

//// cache

// we don't have enough disk space to keep stuff longer
options.cleanup: {
  extraction: {
    success: 96
    failure: 120
  }
  build: {
    success: 96
    failure: 120
  }
}

//// Scala itself

build += {
  sbt-version: ${vars.sbt-version}
  extraction-version: ${vars.scala-version}
  cross-version: disabled

  projects: [
  {
    name:  "scala"
    system: assemble
    extra.parts.projects: [
      {
        set-version: ${vars.scala-version}
        name:   scala-library
        system: aether
        uri:   "aether:org.scala-lang#scala-library;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-reflect
        system: aether
        uri:   "aether:org.scala-lang#scala-reflect;"${vars.scala-version}
      }
      {
        set-version: ${vars.scala-version}
        name:   scala-compiler
        system: aether
        uri:   "aether:org.scala-lang#scala-compiler;"${vars.scala-version}
      }
      // override scalaVersion here since otherwise we get
      // whatever random Scala version the module has
      {
        name: "scala-xml"
        uri: "https://github.com/scala/scala-xml.git"
        extra.commands: "set scalaVersion := \""${vars.scala-version}"\""
      }
    ]
  }
]}

//// a few projects we have multiple entries for and need to make sure
//// we use the same uri each time

vars: {
  akka-ref: "https://github.com/akka/akka.git"
}

//// everything else

build += {
  check-missing: [ true, false ]
  cross-version: [ disabled, standard ]
  extraction-version: ${vars.scala-version}
  sbt-version: ${vars.sbt-version}

  projects: [

  ${vars.base} {
    name: "scala-partest-interface"
    uri: "https://github.com/scala/scala-partest-interface.git"
  }

  ${vars.base} {
    name: "scala-partest"
    uri: "https://github.com/scala/scala-partest.git#2.12.0"
  }

  ${vars.base} {
    name: "scala-swing"
    uri: "https://github.com/scala/scala-swing.git#2.0.x"
  }

  ${vars.base} {
    name: "scala-parser-combinators"
    uri: "https://github.com/scala/scala-parser-combinators.git"
    extra.exclude: ["scala-parser-combinatorsJS"]
  }

  ${vars.base} {
    name: "scalacheck"
    uri: "https://github.com/rickynils/scalacheck.git#1.12.x"
    extra.projects: ["jvm"]  // no Scala.js please
  }

  // "release-0.7" is a stable branch, used to cut 0.7 against new Scala milestones at this time
  ${vars.base} {
    name: scala-stm
    uri:    "https://github.com/nbronson/scala-stm.git#release-0.7"
    // a minor incompatibility with recent versions of scalatest, therefore:
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: shapeless
    uri:    "https://github.com/milessabin/shapeless.git"
    extra.projects: ["coreJVM"]
    // optimizer related. Lukas may want to revisit before 2.12 final
    extra.commands: ${vars.default-commands} [ "removeScalacOptions -Xfatal-warnings" ]
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: "scoverage"
    uri:  "https://github.com/scoverage/scalac-scoverage-plugin.git"
    extra: ${vars.base.extra} {
      exclude: ["scalac-scoverage-runtimeJS"] // no Scala.js please
      run-tests: false // TODO: [info] java.io.FileNotFoundException: Could not locate [~/.ivy2/cache/org.scala-lang/scala-compiler/jars/scala-compiler-2.11.0.jar].
    }
  }

  ${vars.base} {
    name: "scala-java8-compat"
    uri: "https://github.com/scala/scala-java8-compat.git"
    // For some reason dbuild includes test sources in the javadocs, which trips up javadoc because
    // we use "assert" as an identifier there. We disable doc building to avoid that.
    extra.commands: ${vars.default-commands} [ "set publishArtifact in packageDoc := false" ]
  }

  ${vars.base} {
    name: "scalaz"
    uri: "https://github.com/scalaz/scalaz.git#series/7.2.x"
    extra.projects: ["rootJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: scodec-bits
    uri: "https://github.com/scodec/scodec-bits.git#series/1.1.x"
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: scodec
    uri: "https://github.com/scodec/scodec.git#series/1.10.x"
    extra: ${vars.base.extra} {
      projects: ["coreJVM"]
    }
  }

  ${vars.base} {
    name: "scala-records"
    uri: "https://github.com/scala-records/scala-records.git"
    extra.exclude: ["coreJS"]
  }

  ${vars.base} {
    name: "scalatest"
    uri: "https://github.com/SethTisue/scalatest.git#3.0.x-community-build"
    extra: ${vars.base.extra} {
      projects: ["scalatest", "scalactic"]
      run-tests: false // TODO enable tests
    }
  }

  ${vars.base} {
    name: "genjavadoc"
    uri: "https://github.com/typesafehub/genjavadoc.git"
    // TODO Failed tests: com.typesafe.genjavadoc.BasicSpec (looks like maybe the test is too sensitive to ordering?)
    extra.run-tests: false // TODO enable tests
  }

  ${vars.base} {
    name: "akka"
    uri: ${vars.akka-ref}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-actor"]
    }
  }

  ${vars.base} {
    name:   "scala-refactoring"
    // There's no suitable release yet, so we depend on this commit. Upgrade to the next tagged version once released
    uri:    "https://github.com/scala-ide/scala-refactoring.git#44dca8b74808528693f884cfd3c5c9d3ed13e519"
    extra: ${vars.base.extra} {
      directory: "org.scala-refactoring.library"
      run-tests: false // TODO enable tests
    }
  }

  // TODO
  // broken -- does not compile due to source incompat lang change??
  // ${vars.base} {
  //   name:   "scalariform"
  //   uri:    "https://github.com/daniel-trinh/scalariform.git"
  //   // avoid building misc subproject that depends on Swing (and is not needed by any other project)
  //   extra.projects: ["scalariform"]
  //   extra.run-tests: false
  // }

  ${vars.base} {
    name: "async"
    uri: "https://github.com/scala/async.git"
    extra.run-tests: false // TODO: ToolBox based tests report missing JARs. Probably some poor assumption in the async tests.
  }

  ${vars.base} {
    name: "slick"
    uri:  "https://github.com/slick/slick.git"
    // without this dbuild doesn't pick up that one of the subprojects has this dependency.
    // it doesn't even make sense; it seems to me that testNGSettings should not be adding
    // a dependency of the plugin to the libraryDependencies of the test code.
    // the line in question is:
    //   https://github.com/sbt/sbt-testng-interface/blob/ca730f705f48af2139f39bc726b474afec072738/plugin/src/main/scala/de/johoop/testngplugin/TestNGPlugin.scala#L44
    // I think it's a confusion of levels, but maybe I'm missing something. - ST 8/27/15
    deps.inject: ["de.johoop#sbt-testng-interface"]
    // disable fragile tests (https://github.com/scala/community-builds/issues/12#issuecomment-149941055)
    extra.exclude: ["osgitests"]
  }

  ${vars.base} {
    name: "sbt-testng-interface"
    uri: "https://github.com/SethTisue/sbt-testng-interface.git#no-bintray"
    extra.projects: ["sbt-testng-interface"]  // just the interface, we don't need to build the plugin
  }

  // this is a very old, not really maintained project.  the sbt/sxr repo
  // has some newer commits, but hasn't been updated (as of October 2016)
  // to support Scala 2.12.  if 2.12 support starts happening, we could
  // point to the new repo. if it doesn't, I don't think this entry is worth
  // maintaining. I will leave it in place, but if it starts acting up,
  // I think we could just drop it.
  ${vars.base} {
    name:   "browse"
    uri:    "https://github.com/SethTisue/browse.git#topic/2.12-compat"
  }

  ${vars.base} {
    name: sbinary
    // TODO forked (from sbt/sbinary) to remove bintray gunk that doesn't work with dbuild
    uri: "https://github.com/SethTisue/sbinary.git#community-build-2.12"
  }

  ${vars.base} {
    name:   "scala-js"
    uri:    "http://github.com/scala-js/scala-js.git"
    extra: ${vars.base.extra} {
      // hopefully avoid intermittent OutOfMemoryErrors with default 1.5G heap?
      options: ["-Xmx2048m"]
      projects: [ tools, testSuite, stubs ]
      commands: ${vars.default-commands} [
        // - Disable compiler/test because it is very fragile.
        "set test in (Build.compiler, Test) := {}"
        // - Disable fatal Scaladoc warnings, also fragile
        "removeScalacOptions -Xfatal-warnings"
        // - We disable source map tests to save ourselves a `npm install source-map-support` on the workers.
        //   Although only `testSuite` actually has tests, dbuild will try to run the tests for all projects
        //   that `testSuite` depends on (transitively), so we need to set it in a bunch of places.
        "set Seq(library, testInterface, jUnitRuntime, testSuite).map(p => jsEnv in p := NodeJSEnv(executable = \""${vars.node}"\").value.withSourceMap(false))"
      ]
    }
  }

  ${vars.base} {
    name:   "utest"
    uri:    "http://github.com/lihaoyi/utest.git#0.4.3"
    // no Scala.js plz
    extra.projects: ["utestJVM"]
  }

  ${vars.base} {
    name:   "acyclic"
    uri:    "http://github.com/lihaoyi/acyclic.git"
  }

  ${vars.base} {
    name:    "sourcecode"
    uri:     "http://github.com/lihaoyi/sourcecode.git"
    // no Scala.js plz
    extra.projects: ["sourcecodeJVM"]
  }

  ${vars.base} {
    name: "fastparse"
    // disable sbt-coursier plugin; https://github.com/scala/community-builds/issues/294
    uri: "http://github.com/SethTisue/fastparse.git#no-coursier"
    // no Scala.js plz
    extra.projects: ["fastparseJVM"]
    extra.run-tests: false // TODO: tests depend on lambda toString looking like e.g `<function1>`
  }

  ${vars.base} {
    name:   "macro-paradise"
    // TODO use 2.12.x branch once needed changes are merged there?
    uri:    "http://github.com/scalamacros/paradise.git#2.12.0-RC1"
  }

  ${vars.base} {
    name:   "macro-compat"
    uri:    "http://github.com/milessabin/macro-compat.git"
    // no Scala.js plz
    extra.projects: ["testJVM"]
  }

  ${vars.base} {
    name:   "scala-logging"
    uri:    "http://github.com/typesafehub/scala-logging.git"
  }

  ${vars.base} {
    name:   "scalaprops"
    uri:    "http://github.com/scalaprops/scalaprops.git"
    extra.projects: ["rootJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name:   "kxbmap-configs"
    uri:    "http://github.com/kxbmap/configs.git"
  }

  ${vars.base} {
    name:   "fs2"
    // current "master" as of Sep 2016
    uri:    "http://github.com/functional-streams-for-scala/fs2.git#series/0.9"
    extra.exclude: [
      "coreJS" // no Scala.js please
      "docs"   // because we don't have Tut (yet?)
      "benchmark" // not really necessary and would pull in a JMH dependency
    ]
  }

  ${vars.base} {
    name:   "cats"
    // https://github.com/typelevel/cats/issues/1396, https://github.com/typelevel/cats/issues/1377
    uri:    "http://github.com/SethTisue/cats.git#community-build-2.12"
    // this is only some of Cats. we should try and add more
    extra.projects: ["coreJVM", "macrosJVM"] // no Scala.js please
    extra.commands: ${vars.default-commands} [
      // too fragile
      "removeScalacOptions -Xfatal-warnings"
      // no longer exists in 2.12
      "removeScalacOptions -Yinline-warnings"
    ]
  }

  ${vars.base} {
    name:   "simulacrum"
    uri:    "http://github.com/mpilquist/simulacrum.git"
    extra.projects: ["coreJVM", "examplesJVM"] // no Scala.js please
  }

  // TODO report upstream: version-checking logic, ScalaTest 3.0 compat
  ${vars.base} {
    name: "parboiled"
    uri: "https://github.com/SethTisue/parboiled.git#community-build-2.12"
    extra.projects: ["parboiled-scala"]
    extra.run-tests: false // TODO test failures, why?!
  }

  ${vars.base} {
    name: "machinist"
    uri: "https://github.com/typelevel/machinist.git"
    extra.projects: ["machinistJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name: "kind-projector"
    uri:  "https://github.com/non/kind-projector.git"
  }

  ${vars.base} {
    name: "discipline"
    uri: "https://github.com/typelevel/discipline.git#v0.7"
    extra.projects: ["disciplineJVM"]  // no Scala.js please
  }

  ${vars.base} {
    name:   "twitter-util"
    // try master instead if develop proves too fragile?
    uri:    "http://github.com/twitter/util.git#develop"
    // this isn't really necessary and would pull in a JMH dependency
    extra.exclude: ["util-benchmark"]
    // recommended at https://github.com/twitter/util/issues/173:
    // "We use that when we don't think the tests will be reliable in a ci environment"
    extra.options: ["-DSKIP_FLAKY=true"]
    // they're still on ScalaTest 2, we're on ScalaTest 3 here, so the tests don't even
    // compile (as of October 2016)
    extra.run-tests: false
  }

  // note that we don't have MiMa in the JDK6 build.  I tried but it
  // was running out of PermGen when running the functional tests.
  // rather than sink time into investigating, just confining it to
  // JDK8 world seems perfectly fine.
  ${vars.base} {
    name:   "mima"
    // normally MiMa runs on 2.10 (because sbt 0.13 does), so the branch won't
    // be merged onto master for quite a while yet
    uri:    "http://github.com/typesafehub/migration-manager.git#scala-2.12"
    // we don't compile sbt plugins
    extra.exclude: ["sbtplugin"]
  }

  ${vars.base} {
    name: "spire"
    uri: "https://github.com/SethTisue/spire.git#community-build-2.12"
    // TODO: tests crash with:
    // [info] [error] Could not run test spire.laws.LawTests:
    // java.lang.ClassFormatError: Duplicate method name&signature in class file spire/std/OrderProductInstances$$anon$228
    extra.run-tests: false
    // hopefully avoid intermittent OutOfMemoryErrors during compilation
    extra.options: ["-Xmx2048m"]
    extra.projects: ["spireJVM"]  // no Scala.js please
    // no longer exists in 2.12
    extra.commands: ${vars.default-commands} [
      "removeScalacOptions -Yinline-warnings"
    ]
  }

  ${vars.base} {
    name: "breeze"
    uri: "https://github.com/scalanlp/breeze.git"
    // failing tests reported upstream at https://github.com/scalanlp/breeze/issues/587
    extra.run-tests: false
  }

  ${vars.base} {
    name: specs2
    uri: "https://github.com/etorreborre/specs2.git"
    extra.run-tests: false // TODO: ??? - hasn't been tried lately
    extra.commands: ${vars.default-commands} [
      // too fragile? TODO: I got a non-exhaustive match warning that
      // could conceivably indicate some real regression. or maybe it's
      // just a version mismatch for some library? who knows
      "removeScalacOptions -Xfatal-warnings"
    ]
  }

  ${vars.base} {
    name: "ssl-config"
    uri: "https://github.com/typesafehub/ssl-config.git"
  }

  ${vars.base} {
    name: "spray-json"
    uri: "https://github.com/spray/spray-json.git"
  }

  // this is separate from "akka" because there is a circular dependency between
  // the akka and ssl-config repos. (akka-http depends on ssl-config-akka which
  // depends on akka-actor)
  ${vars.base} {
    name: "akka-more"
    uri: ${vars.akka-ref}
    extra: ${vars.base.extra} {
      options: ["-Dakka.genjavadoc.enabled=false", "-Dakka.scaladoc.diagrams=false", "-Dakka.build.aggregateSamples=false"]
      projects: ["akka-scala-nightly"]
      exclude: [
        "akka-docs"   // this is Sphinx stuff, not really apropos here, no Sphinx on Jenkins anyway
        "akka-actor"  // because we already built it in "akka"
        "akka-bench-jmh"  // we'd have to add a resolver to get the JMH dependency - ST 8/17/15
      ]
      run-tests: false // TODO wip on this at https://github.com/scala/community-builds/pull/317
      // Scaladoc generation failure reported upstream at https://github.com/akka/akka/issues/21543
      commands: ${vars.default-commands} [
        "set sources in doc in Compile in httpCore := List()"
      ]
    }
  }

  ${vars.base} {
    name:   "scalikejdbc"
    uri:    "http://github.com/scalikejdbc/scalikejdbc.git"
    // don't build sbt plugin
    extra.exclude: ["mapper-generator"]
  }

  ${vars.base} {
    name:   "scopt"
    uri:    "http://github.com/scopt/scopt.git#scopt3"
  }

  ${vars.base} {
    name: "twirl"
    extra.exclude: [ "plugin", "apiJS" ]
    uri: "https://github.com/playframework/twirl.git#master"
  }

  ${vars.base} {
    name: "play-doc"
    uri: "https://github.com/playframework/play-doc.git#master"
  }

  ${vars.base} {
    name: "play2-core"
    uri: "https://github.com/playframework/playframework.git"
    extra: ${vars.base.extra} {
      // TODO: enable more projects? these are just a few that seemed especially high-value.
      // we tried including "Play-Integration-Test" but hit a mysterious StackOverflowError
      // in scala.tools.nsc.javac.JavaScanners; see https://github.com/scala/community-builds/issues/304
      projects: ["Play", "Play-Test", "Play-WS"]
      exclude: ["SBT-Plugin"]
      directory: "framework"
      commands: ${vars.default-commands} [
        // workaround for the problem with PlayVersion.scala file is being passed twice to Scala compiler
        // and we get double definition error
        "set sources in (PlayProject, Compile, compile) := (sources in (PlayProject, Compile, compile)).value.distinct"
        // there was some Scaladoc error here I didn't bother to look into
        "set sources in doc in Compile in PlayProject := List()"
      ]
    }
  }

  ${vars.base} {
    name: "json4s"
    uri: "https://github.com/json4s/json4s.git#3.5"  // this is the current "master" branch (as of Oct 2016)
    extra.projects: ["json4s-native", "json4s-jackson"] // TODO: exclude subprojects we don't want, rather than naming a few we want. probably adding more would work?
  }

  ${vars.base} {
    name: "lift-json"
    // TODO unfork once https://github.com/lift/framework/pull/1812 gets merged
    uri: "https://github.com/SethTisue/framework.git#community-build-2.12"
    extra.projects: ["lift-json"]
  }

  ${vars.base} {
    name: "jawn"
    uri: "http://github.com/non/jawn.git"
    // omitted TODO: play
    // omitted: rojoma-v3, rojoma, benchmark, argonaut
    // (we have Argonaut in the community build, but it depends on jawn! dbuild
    // doesn't like the circularity. I think we could break it by having two jawn entries,
    // one for the core and one for the extras, but I haven't tried yet)
    extra.projects: ["ast", "parser", "json4s", "spray"]
  }

  ${vars.base} {
    name:   "scalamock"
    // TODO forked because specs2 support requires specs2 2.x but we only
    // have 3.x here now. and because excluding that subproject here isn't enough
    // (see diffs in the fork for details)
    uri:    "https://github.com/SethTisue/scalamock.git#community-build-2.12"
    // not sure why "examples" is also excluded? maybe it has specs2 stuff too?
    extra.exclude: [ "specs2", "examples" ]
  }

  ${vars.base} {
    name: "argonaut"
    uri: "https://github.com/argonaut-io/argonaut.git"
    extra.exclude: [
      // fails to declare its scala-parser-combinators dependency,
      // and anyway we don't want to run benchmarks
      "argonaut-benchmark"
      // I got into trouble trying to add this -- it depended on
      // cats-laws which needs ScalaCheck 1.13
      "argonaut-cats"
    ]
  }

  ${vars.base} {
    name: "monocle"
    // TODO move to master once full 2.12 support is there, and try to
    // enable more subprojects besides just these few
    uri: "https://github.com/julien-truffaut/Monocle.git#scala-2.12-RC1-core"
    extra.projects: ["coreJVM", "macrosJVM", "lawJVM"]
  }

  ${vars.base} {
    name: "catalysts"
    uri: "https://github.com/typelevel/catalysts.git"
    // TODO add more projects? hasn't been tried yet
    extra.projects: ["platformJVM"]
  }

]}
